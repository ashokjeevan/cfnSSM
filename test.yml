AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Test SSM Parameters
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  EC2InstanceType:
    Description: EC2 instance type for  CodeDeploy Web Servers
    Type: String
    Default: t2.micro
  VpcId:
    Description: The VPC Id where the EC2 instances will be launched.
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: must be the name of an existing VPC.
Resources:
  ApacheInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref ApacheInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref ApacheSecurityGroup
      Tags:
        - Key: Name
          Value: SSM Test

  ApacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access from specific CIDR block
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 174.4.31.20/32
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 174.4.31.20/32 
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 174.4.31.20/32
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0

  ApacheRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  ApacheInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ApacheRole

  ApachePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ApachePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'codedeploy:ListApplications'
              - 'codedeploy:ListDeploymentGroups'
              - 'codedeploy:RegisterApplicationRevision'
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetDeploymentConfig'
              - 'codedeploy:GetApplicationRevision'
              - 'codedeploy:GetDeployment'
            Resource: '*'
      Roles:
        - !Ref ApacheRole

  AnsibleAssociation:
    Type: AWS::SSM::Association
    Properties:
      # Here using the AWS-ApplyAnsiblePlaybooks
      Name: AWS-ApplyAnsiblePlaybooks
      # This will cause CloudFormation to wait for the association to apply
      WaitForSuccessTimeoutSeconds: 120
      Targets:
        - Key: InstanceIds
          Values: [ !Ref ApacheInstance ]
      Parameters:
        # Getting an Ansible Playbook from a GitHub Location
        SourceType:
          - 'GitHub'
        # At a minimum must include the following GitHub repo information, if using a private repo 
        # would want to include a GitHub Token
        SourceInfo:
          - '{"owner":"ashokjeevan",
              "repository":"https://github.com/ashokjeevan/cfnSSM.git",
              "path":"",
              "getOptions":"branch:master" }'
        # Installing Ansible and its dependencies
        InstallDependencies:
          - 'True'
        # Playbook file we want to run
        PlaybookFile:
          - 'httpdPlaybook.yml'
        ExtraVariables:
          - 'SSM=True'
        Check:
          - 'False'
        Verbose:
          - '-v'


Outputs:
  EC2InstanceAmiId:
    Description: Public IP
    Value: !GetAtt ApacheInstance.PublicIp
  EC2Ami:
    Description: The AMI used in the EC2 instance
    Value: !Ref LatestAmiId